generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  login     String   @unique
  password  String
  isAdmin   Boolean  @default(false) @map("is_admin")
  groupId   Int?     @map("group_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  group     Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("users")
}

model Student {
  id                  Int                  @id @default(autoincrement())
  name                String
  surname             String
  secondName          String?              @map("second_name")
  birthDate           DateTime             @map("birth_date")
  groupId             Int?                 @map("group_id")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  isExpelled          Boolean              @default(false) @map("is_expelled")
  medicalCertificates MedicalCertificate[]
  StudentHistory      StudentHistory[]
  group               Group?               @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("students")
}

model StudentHistory {
  id        Int      @id @default(autoincrement())
  studentId Int      @map("student_id")
  groupId   Int?     @map("group_id")
  createdAt DateTime @default(now()) @map("created_at")
  group     Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_histories")
}

model HealthGroup {
  id                        Int                         @id @default(autoincrement())
  name                      String                      @unique
  createdAt                 DateTime                    @default(now()) @map("created_at")
  updatedAt                 DateTime                    @updatedAt @map("updated_at")
  MedicalCertificateHistory MedicalCertificateHistory[]
  medicalCertificates       MedicalCertificate[]

  @@map("health_groups")
}

model PhysicalEducation {
  id                        Int                         @id @default(autoincrement())
  name                      String                      @unique
  createdAt                 DateTime                    @default(now()) @map("created_at")
  updatedAt                 DateTime                    @updatedAt @map("updated_at")
  MedicalCertificateHistory MedicalCertificateHistory[]
  medicalCertificates       MedicalCertificate[]

  @@map("physical_educations")
}

model MedicalCertificate {
  id                        Int                         @id @default(autoincrement())
  startDate                 DateTime                    @map("start_date")
  finishDate                DateTime                    @map("finish_date")
  studentId                 Int                         @map("student_id")
  healthGroupId             Int                         @map("health_group_id")
  physicalEducationId       Int                         @map("physical_education_id")
  createdAt                 DateTime                    @default(now()) @map("created_at")
  updatedAt                 DateTime                    @updatedAt @map("updated_at")
  MedicalCertificateHistory MedicalCertificateHistory[]
  healthGroup               HealthGroup                 @relation(fields: [healthGroupId], references: [id], onDelete: Cascade)
  physicalEducation         PhysicalEducation           @relation(fields: [physicalEducationId], references: [id], onDelete: Cascade)
  student                   Student                     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("medical_certificates")
}

model MedicalCertificateHistory {
  id                   Int                @id @default(autoincrement())
  medicalCertificateId Int                @map("medical_certificate_id")
  createdAt            DateTime           @default(now()) @map("created_at")
  finishDate           DateTime?          @map("finish_date")
  healthGroupId        Int?               @map("health_group_id")
  physicalEducationId  Int?               @map("physical_education_id")
  startDate            DateTime?          @map("start_date")
  healthGroup          HealthGroup?       @relation(fields: [healthGroupId], references: [id])
  medicalCertificate   MedicalCertificate @relation(fields: [medicalCertificateId], references: [id], onDelete: Cascade)
  physicalEducation    PhysicalEducation? @relation(fields: [physicalEducationId], references: [id], onDelete: Cascade)

  @@map("medical_certificate_histories")
}

model Group {
  id             Int              @id @default(autoincrement())
  name           String
  courseId       Int              @map("course_id")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  course         Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  StudentHistory StudentHistory[]
  students       Student[]
  User           User[]

  @@unique([name, courseId])
  @@map("groups")
}

model Department {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  courses   Course[]

  @@map("departments")
}

model Course {
  id           Int        @id @default(autoincrement())
  number       Int
  departmentId Int        @map("department_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  groups       Group[]

  @@unique([number, departmentId])
  @@map("courses")
}
