generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  login     String   @unique
  password  String
  isAdmin   Boolean  @default(false) @map("is_admin")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Group     Group[]

  @@map("users")
}

model Student {
  id                  Int                  @id @default(autoincrement())
  name                String
  surname             String
  secondName          String?              @map("second_name")
  birthDate           DateTime             @map("birth_date")
  groupId             Int?                 @map("group_id")
  group               Group?               @relation(fields: [groupId], references: [id])
  medicalCertificates MedicalCertificate[]

  @@map("students")
}

model HealthGroup {
  id                  Int                  @id @default(autoincrement())
  name                String
  medicalCertificates MedicalCertificate[]

  @@map("health_groups")
}

model PhysicalEducation {
  id                  Int                  @id @default(autoincrement())
  name                String
  medicalCertificates MedicalCertificate[]

  @@map("physical_educations")
}

model MedicalCertificate {
  id                  Int               @id @default(autoincrement())
  startDate           DateTime          @map("start_date")
  finishDate          DateTime          @map("finish_date")
  studentId           Int               @map("student_id")
  student             Student           @relation(fields: [studentId], references: [id])
  healthGroupId       Int               @map("health_group_id")
  healthGroup         HealthGroup       @relation(fields: [healthGroupId], references: [id])
  physicalEducationId Int               @map("physical_education_id")
  physicalEducation   PhysicalEducation @relation(fields: [physicalEducationId], references: [id])

  @@map("medical_certificates")
}

model Group {
  id       Int       @id @default(autoincrement())
  name     String
  courseId Int       @map("course_id")
  course   Course    @relation(fields: [courseId], references: [id])
  userId   Int?      @map("user_id")
  user     User?     @relation(fields: [userId], references: [id])
  students Student[]

  @@map("groups")
}

model Department {
  id     Int      @id @default(autoincrement())
  name   String
  Course Course[]

  @@map("departments")
}

model Course {
  id           Int        @id @default(autoincrement())
  number       Int
  departmentId Int        @map("department_id")
  department   Department @relation(fields: [departmentId], references: [id])
  groups       Group[]

  @@map("courses")
}
